type Authors implements BlockDocument & BlockList {
  _id: String!
  _idPath: String!
  _meta: ListMeta!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  items: [AuthorsItem!]!
}

""""""
type AuthorsItem implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  avatar: BlockImage
  biography: Biography
  name: String
  role: String
  socialMedia(
    """Filter by a field."""
    filter: SocialMediaComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: SocialMediaComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): SocialMedia!
}

input AuthorsItemFilterInput {
  AND: AuthorsItemFilterInput
  OR: AuthorsItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  name: StringFilter
  role: StringFilter
  socialMedia: ListFilter
}

enum AuthorsItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  avatar__ASC
  avatar__DESC
  biography__ASC
  biography__DESC
  name__ASC
  name__DESC
  role__ASC
  role__DESC
  socialMedia__ASC
  socialMedia__DESC
}

type BaseRichTextJson implements RichTextJson {
  blocks: String!
  content: JSON!
  toc: JSON!
}

type Biography implements BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: BiographyRichText!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type BiographyRichText implements RichTextJson {
  content: JSON!
  toc: JSON!
}

type BlockAudio {
  fileName: String!
  fileSize: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
}

type BlockCodeSnippet {
  allowedLanguages: [String!]!
  code: String!
  html(
    """Theme for the code snippet"""
    theme: String = "github-dark"
  ): String! @deprecated(reason: "Figuring out the correct api.")
  language: String!
}

type BlockColor {
  hex: String!
  hsl: String!
  rgb: String!
}

interface BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

type BlockDocumentSys {
  apiNamePath: String!
  createdAt: String!
  hash: String!
  id: ID!
  idPath: String!
  lastModifiedAt: String!
  slug: String!
  slugPath: String!
  title: String!
}

type BlockFile {
  fileName: String!
  fileSize: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
}

type BlockImage {
  alt: String
  aspectRatio: String!
  fileName: String!
  fileSize: Int!
  height: Int!
  lastModified: Float!
  mimeType: String!
  rawUrl: String!
  url(blur: Int, brightness: Int, compression: String, contrast: Int, dpr: Int, fit: String, format: String, height: Int, quality: Int, width: Int): String!
  width: Int!
}

interface BlockList implements BlockDocument {
  _id: String!
  _idPath: String!
  _meta: ListMeta!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

"""Rich text block"""
interface BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: RichTextJson!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type BlockVideo {
  aspectRatio: String!
  fileName: String!
  fileSize: Int!
  height: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
  width: Int!
}

type Blog implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  blogPosts(
    """Filter by a field."""
    filter: BlogPostsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: BlogPostsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): BlogPosts!
  seo: SeoComponent!
}

type BlogPosts implements BlockDocument & BlockList {
  _id: String!
  _idPath: String!
  _meta: ListMeta!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  items: [BlogPostsItem!]!
}

""""""
type BlogPostsItem implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  author: AuthorsItem
  body: Body
  category: CategoriesItem
  coverImage: BlockImage

  """ISO 8601 date string."""
  date: String
  isPublished: Boolean!
  seo: SeoComponent!
  subtitle: String
  summary: String
  timeToRead: String
  type: TypesItem
}

input BlogPostsItemFilterInput {
  AND: BlogPostsItemFilterInput
  OR: BlogPostsItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  author: BlogPostsItemFilterInput__author_0___untitled
  date: DateFilter
  isPublished: Boolean
  seo: BlogPostsItemFilterInput__seo
  subtitle: StringFilter
  summary: StringFilter
  timeToRead: StringFilter
  type: BlogPostsItemFilterInput__type_0___untitled
}

input BlogPostsItemFilterInput__author_0___untitled {
  name: StringFilter
  role: StringFilter
  socialMedia: ListFilter
}

input BlogPostsItemFilterInput__seo {
  keywords: StringFilter
  metaDescription: StringFilter
  metaTitle: StringFilter
  sharingTitle: StringFilter
}

input BlogPostsItemFilterInput__type_0___untitled {
  name: StringFilter
  slug: StringFilter
}

enum BlogPostsItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  author__ASC
  author__DESC
  body__ASC
  body__DESC
  category__ASC
  category__DESC
  coverImage__ASC
  coverImage__DESC
  date__ASC
  date__DESC
  isPublished__ASC
  isPublished__DESC
  seo__ASC
  seo__DESC
  subtitle__ASC
  subtitle__DESC
  summary__ASC
  summary__DESC
  timeToRead__ASC
  timeToRead__DESC
  type__ASC
  type__DESC
}

type Body implements BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: BodyRichText!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type BodyRichText implements RichTextJson {
  blocks: [LinkComponent!]!
  content: JSON!
  toc: JSON!
}

type Categories implements BlockDocument & BlockList {
  _id: String!
  _idPath: String!
  _meta: ListMeta!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  items: [CategoriesItem!]!
}

""""""
type CategoriesItem implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

input CategoriesItemFilterInput {
  AND: CategoriesItemFilterInput
  OR: CategoriesItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
}

enum CategoriesItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
}

type Collections implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  authors(
    """Filter by a field."""
    filter: AuthorsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: AuthorsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Authors!
  categories(
    """Filter by a field."""
    filter: CategoriesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: CategoriesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Categories!
  types(
    """Filter by a field."""
    filter: TypesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: TypesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Types!
}

type Components implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  link: LinkComponent!
  seo: SeoComponent!
  socialMedia: SocialMediaComponent!
}

input DateFilter {
  eq: DateTime
  isAfter: DateTime
  isBefore: DateTime
  neq: DateTime
  onOrAfter: DateTime
  onOrBefore: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Docs implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  docsPosts(
    """Filter by a field."""
    filter: DocsPostsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: DocsPostsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): DocsPosts!
  seo: SeoComponent!
}

type DocsPosts implements BlockDocument & BlockList {
  _id: String!
  _idPath: String!
  _meta: ListMeta!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  items: [DocsPostsItem!]!
}

""""""
type DocsPostsItem implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  docs: String
}

input DocsPostsItemFilterInput {
  AND: DocsPostsItemFilterInput
  OR: DocsPostsItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  docs: StringFilter
}

enum DocsPostsItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  docs__ASC
  docs__DESC
}

type HomePage implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  seo: SeoComponent!
}

type Insights implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  blog: Blog!
  docs: Docs!
  seo: SeoComponent!
}

scalar JSON

""""""
type LinkComponent implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  externalUrl: Boolean!
  text: String
  url: String
}

input ListFilter {
  isEmpty: Boolean
  length: Int
}

type ListMeta {
  totalCount: Int!
}

input NumberFilter {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

type Query {
  """
  Query across all of the instances of a component. Pass in filters and sorts if you want, and get each instance via the `items` key.
  """
  _componentInstances: _components!
  _sys: RepoSys!
  collections: Collections!
  components: Components!
  homePage: HomePage!
  insights: Insights!
}

type RepoSys {
  hash: String!
  id: ID!
  slug: String!
  title: String!
}

interface RichTextJson {
  content: JSON!
  toc: JSON!
}

""""""
type SeoComponent implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  keywords: String
  metaDescription: String
  metaImage: BlockImage
  metaTitle: String
  sharingTitle: String
}

type SocialMedia implements BlockDocument & BlockList {
  _id: String!
  _idPath: String!
  _meta: ListMeta!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  items: [SocialMediaComponent!]!
}

""""""
type SocialMediaComponent implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  icon: BlockImage
  link: LinkComponent!
  name: String
}

input SocialMediaComponentFilterInput {
  AND: SocialMediaComponentFilterInput
  OR: SocialMediaComponentFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  link: SocialMediaComponentFilterInput__link
  name: StringFilter
}

input SocialMediaComponentFilterInput__link {
  externalUrl: Boolean
  text: StringFilter
  url: StringFilter
}

enum SocialMediaComponentOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  icon__ASC
  icon__DESC
  link__ASC
  link__DESC
  name__ASC
  name__DESC
}

input StringFilter {
  contains: String
  endsWith: String
  eq: String
  matches: StringMatchesFilter
  notEq: String
  startsWith: String
}

input StringMatchesFilter {
  caseSensitive: Boolean = true
  pattern: String!
}

type Types implements BlockDocument & BlockList {
  _id: String!
  _idPath: String!
  _meta: ListMeta!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  items: [TypesItem!]!
}

""""""
type TypesItem implements BlockDocument {
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  name: String
  slug: String
}

input TypesItemFilterInput {
  AND: TypesItemFilterInput
  OR: TypesItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  name: StringFilter
  slug: StringFilter
}

enum TypesItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  name__ASC
  name__DESC
  slug__ASC
  slug__DESC
}

type _components {
  authorsItem(
    """Filter by a field."""
    filter: AuthorsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: AuthorsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Authors!
  blogPostsItem(
    """Filter by a field."""
    filter: BlogPostsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: BlogPostsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): BlogPosts!
  categoriesItem(
    """Filter by a field."""
    filter: CategoriesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: CategoriesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Categories!
  docsPostsItem(
    """Filter by a field."""
    filter: DocsPostsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: DocsPostsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): DocsPosts!
  socialMedia(
    """Filter by a field."""
    filter: SocialMediaComponentFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: SocialMediaComponentOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): SocialMedia!
  typesItem(
    """Filter by a field."""
    filter: TypesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: TypesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Types!
}